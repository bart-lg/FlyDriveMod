breed [ yummy-plants yummy-plant ]

; properties of yummy-plants
yummy-plants-own [
  
  grown-fruits
  occupied-fruits
  
]

to plant-yummy-plant [ x y ]
  
  create-yummy-plants 1 [
   
    set shape "square"
    set color 54
    setxy x y
    set grown-fruits yummy-fruits-per-plant
    set occupied-fruits 0
    
  ]
  
end

to plant-yummy-plants
  
  ; coordinates in world
  let x-coordinate 0
  let y-coordinate 0

  set x-coordinate border-margin + 1 
  set y-coordinate border-margin + 1 
  while [ x-coordinate <= ( max-pxcor - border-margin ) ] [
    
    if not any? yummy-plants-on patch x-coordinate y-coordinate [
      plant-yummy-plant x-coordinate y-coordinate
    ]
    
    set x-coordinate ( x-coordinate + 1 )
    
  ]

  set x-coordinate border-margin + 1 
  set y-coordinate max-pycor - border-margin
  while [ x-coordinate <= ( max-pxcor - border-margin ) ] [
    
    if not any? yummy-plants-on patch x-coordinate y-coordinate [
      plant-yummy-plant x-coordinate y-coordinate
    ]
    
    set x-coordinate ( x-coordinate + 1 )
    
  ]
  
  set x-coordinate border-margin + 1 
  set y-coordinate border-margin + 2 
  while [ y-coordinate <= ( max-pycor - border-margin ) ] [
    
    if not any? yummy-plants-on patch x-coordinate y-coordinate [
      plant-yummy-plant x-coordinate y-coordinate
    ]
    
    set y-coordinate ( y-coordinate + 1 )
    
  ]  

  set x-coordinate max-pxcor - border-margin
  set y-coordinate border-margin + 2 
  while [ y-coordinate <= ( max-pycor - border-margin ) ] [
    
    if not any? yummy-plants-on patch x-coordinate y-coordinate [
      plant-yummy-plant x-coordinate y-coordinate
    ]
    
    set y-coordinate ( y-coordinate + 1 )
    
  ]
  
end

to grow-yummy-fruits 
  
  ask yummy-plants with [ ( grown-fruits + count flies-here with [ mode = "stationary" ] ) < yummy-fruits-per-plant ] [
    set grown-fruits ( grown-fruits + 1 ) 
  ]
  
  set total-grown-fruits sum [ grown-fruits ] of yummy-plants
  ifelse total-grown-fruits > 0   [ set fruits-available TRUE   ] [ set fruits-available FALSE   ]
  
end

to fruits-attract-closest-flies
  
  if fruits-available [
    
    ask yummy-plants with [ grown-fruits > 0 ] [
     
      let flies-in-radius flies with [ ready-to-lay-egg and ( target-tick < ticks or distance myself < target-distance ) ] in-radius visibility
      if count flies-in-radius > grown-fruits [
        set flies-in-radius min-n-of grown-fruits flies-in-radius [ distance myself ]
      ]
      
      let target-x xcor
      let target-y ycor
      
      ask flies-in-radius [
       
        facexy target-x target-y
        set target-tick ticks
        set target-distance distance patch target-x target-y
        
      ]
      
    ]
    
  ]  
  
end