breed [ trees tree ]

; properties of tree
trees-own [
  
  new-cherry-part
  new_cherries
  max-cherries
  grown-cherries
  occupied-cherries

  
]

to plant-trees
  
  ; coordinates in world
  let x-coordinate 0
  let y-coordinate 0
  
  ; tree indices
  let i 1
  let j 1 
  
  while [ i <= tree-rows ] [
    
    set j 1
    while [ j <= trees-per-row ] [
      
      set x-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin + ( j - 1 ) * ( tree-width + tree-margin-x ) )
      set y-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin + ( i - 1 ) * ( tree-width + tree-margin-y ) )
      
      if ( tree-width > 1 ) [ set x-coordinate ( x-coordinate + ceiling ( tree-width / 2 ) ) ]
      if ( tree-width > 1 ) [ set y-coordinate ( y-coordinate + ceiling ( tree-width / 2 ) ) ]
      
      create-trees 1 [
        set shape "circle"
        set color green
        set size tree-width 
        setxy x-coordinate y-coordinate
        set max-cherries round ( random-normal mean-cherries sd-cherries )
        set grown-cherries 0
        set occupied-cherries 0
        set new-cherry-part  ( max-cherries / ( cherries-growth-period * ticks-per-day ) )
        update-tree-label     
      ]
      
      set j ( j + 1 ) 
    ]
    
    set i ( i + 1 ) 
  ]
  
end

to update-tree-label
  set label ( word grown-cherries "|" occupied-cherries )
end

to grow-cherries
  
  
  if ( sim-day >= cherries-growth-start ) and ( sim-day <= cherries-growth-start + cherries-growth-period ) [    ; arguement that cherries should grow between the growth start and the the end of the growth period
   
   
    ifelse ( sim-day = cherries-growth-start + cherries-growth-period ) [                                    ; if for any reason on the last day of the growth period not all cherries are grown they will be now
      ask trees [
        if ( max-cherries - occupied-cherries ) > grown-cherries [
          set grown-cherries ( max-cherries - occupied-cherries ) 
        ]
      ]
    ] [
      ask trees [                                                                                        ; the normal growth function
        let new-cherries 0
        
        set new_cherries (new_cherries + new-cherry-part)
          ifelse new_cherries >= 1 [
            set new-cherries ( floor new_cherries )
            set new_cherries ( new_cherries - floor new_cherries )]
          [set new-cherries 0]
        ifelse ( grown-cherries + new-cherries ) < ( max-cherries - occupied-cherries ) [                ; if the addition of the new cherries doesn't isn't bigger than the max-cherries cap the will be added. could also be written as grown-cherries + occupied-cherries + new-cherries < max-cherries
          set grown-cherries ( grown-cherries + new-cherries ) 
        ] [
          if ( max-cherries - occupied-cherries ) > grown-cherries [                                     ; in case the max-cherries cap would be exceeded the grown-cherries will be grown to the max-cherries cap
            set grown-cherries ( max-cherries - occupied-cherries ) 
          ]
        ]  
      ]
    ]
    
    ask trees [ update-tree-label ]
    
  
      
  set total-grown-cherries sum [ grown-cherries ] of trees
  ifelse total-grown-cherries > 0 [ set cherries-available TRUE ] [ set cherries-available FALSE ]
  ]
  
end

;harvest funktioniert halbert (oder eh schon) wenn ich alles nach ask trees with [xcor... rausnehme außer set ...-cherries 0, dann wird einmal am Tag geerntet, halt nicht stündlich
to harvest
  
  let first_harvest_day ( cherries-growth-start + cherries-growth-period )
  let x-coordinate 0
  
  set x-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin +  ( ( sim-day - first_harvest_day ) * ( tree-width + tree-margin-x ) ) )
  if ( tree-width > 1 ) [ set x-coordinate ( x-coordinate + ceiling ( tree-width / 2 ) ) ]
  
  ask trees with [xcor = x-coordinate] [
    set color red
    set grown-cherries 0 
    set occupied-cherries 0
    update-tree-label 
    ask flies with [mode = "stationary"] in-radius tree-radius [ die ]
  ]
  
   
end



to cherries-attract-closest-flies
  
  if cherries-available [
    
    let female-flies-with-eggs flies with [ ready-to-lay-egg ]
    
    ask trees with [ grown-cherries > 0 ] [
     
      let flies-in-radius female-flies-with-eggs with [ target-tick < ticks or distance myself < target-distance ] in-radius visibility
      if count flies-in-radius > grown-cherries [
        set flies-in-radius min-n-of grown-cherries flies-in-radius [ distance myself ]
      ]
      
      if any? flies-in-radius [
      
        let target-x xcor
        let target-y ycor
        
        ask flies-in-radius [
          
          facexy target-x target-y
          set target-tick ticks
          set target-distance distance patch target-x target-y
          
        ]
        
      ]
      
    ]
    
  ]
  
end