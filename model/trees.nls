breed [ trees tree ]

; properties of tree
trees-own [
  
  max-cherries
  grown-cherries
  occupied-cherries
  spray_tick
  magic_substance
  magic_substance_tick
  
]

to plant-trees
  
  ; coordinates in world
  let x-coordinate 0
  let y-coordinate 0
  
  ; tree indices
  let i 1
  let j 1 
  
  while [ i <= tree-rows ] [
    
    set j 1
    while [ j <= trees-per-row ] [
      
      set x-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin + ( j - 1 ) * ( tree-width + tree-margin-x ) )
      set y-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin + ( i - 1 ) * ( tree-width + tree-margin-y ) )
      
      if ( tree-width > 1 ) [ set x-coordinate ( x-coordinate + ceiling ( tree-width / 2 ) ) ]
      if ( tree-width > 1 ) [ set y-coordinate ( y-coordinate + ceiling ( tree-width / 2 ) ) ]
      
      create-trees 1 [
        set shape "circle"
        set color green
        set size tree-width 
        setxy x-coordinate y-coordinate
        set max-cherries round ( random-normal mean-cherries sd-cherries )
        set grown-cherries 0
        set occupied-cherries 0
        set spray_tick (0 - ms_spray_day * ticks-per-day )
        update-tree-label     
      ]
      
      set j ( j + 1 ) 
    ]
    
    set i ( i + 1 ) 
  ]
  
end

to update-tree-label
  set label ( word grown-cherries "|" occupied-cherries )
end

to grow-cherries
  
  let day 1
  if ( ticks > 0 ) [
    set day ( ceiling ( ticks / ticks-per-day ) mod 365 )
  ]
  
  ; remove cherries on 1st jan of every year
  if day = 1 [
    ask trees [
      set grown-cherries 0
      set occupied-cherries 0
      update-tree-label
    ]
  ]
  
  if ( day >= cherries-growth-start ) and ( day <= cherries-growth-start + cherries-growth-period ) [
    
    ifelse ( day = cherries-growth-start + cherries-growth-period ) [
      ask trees [
        if ( max-cherries - occupied-cherries ) > grown-cherries [
          set grown-cherries ( max-cherries - occupied-cherries ) 
        ]
      ]
    ] [
      ask trees [
        let new-cherries ceiling ( max-cherries / ( cherries-growth-period * ticks-per-day ) )
        ifelse ( grown-cherries + new-cherries ) < ( max-cherries - occupied-cherries ) [
          set grown-cherries ( grown-cherries + new-cherries ) 
        ] [
          if ( max-cherries - occupied-cherries ) > grown-cherries [
            set grown-cherries ( max-cherries - occupied-cherries ) 
          ]
        ]  
      ]
    ]  
    
    ask trees [ update-tree-label ]
    
  ]
  
;  If day >= cherries-growth-start + cherries-growth-period [
;    ask trees [
;      If grown-cherries + occupied-cherries > 0 
;      [harvest]
;    ]
;  ]
  
  set total-grown-cherries sum [ grown-cherries ] of trees
  ifelse total-grown-cherries > 0 [ set cherries-available TRUE ] [ set cherries-available FALSE ]
  
  
end

;to harvest
;  let harvest_grown_cherries precision (grown-cherries / 10) 1
;  let harvest_occupied_cherries precision (occupied-cherries / 10) 1
;  ask trees [ 
;    ifelse grown-cherries > 0 [
;      set grown-cherries precision ( grown-cherries - harvest_grown_cherries  ) 1
;    ][
;      set grown-cherries 0
;  ]
;    
;    ifelse occupied-cherries > 0 [
;      set occupied-cherries precision  ( occupied-cherries - harvest_occupied_cherries ) 1
;    ][
;      set occupied-cherries 0
;    ]
;    update-tree-label
;  ]  
;end


to spray_magic_substance
  
  let x-coordinate 0
  
  if ticks = ( (ms_spray_day - 1 + ( (ms_spray_year * 365 ) - 365 ) ) * ticks-per-day + 1) [
    set spray_tick ticks ]
  
  if ms_periodic_spray > 1 and ticks > ( (ms_spray_day - 1 + ( (ms_spray_year * 365 ) - 365 ) ) * ticks-per-day + 1) and ticks <= ( ( (ms_spray_day - 1 + ( (ms_spray_year * 365 ) - 365 ) ) ) + ( ( ms_periodic_spray - 1) * ms_periodic_interval) ) * ticks-per-day + 1 [
    if ( ( ticks -  ( (ms_spray_day - 1 + ( (ms_spray_year * 365 ) - 365 ) ) * ticks-per-day + 1) ) mod (ms_periodic_interval * ticks-per-day ) ) = 0 [
      set spray_tick ticks
    ]
  ]
  
  if ( ( ticks - spray_tick + 1 )  > 0 and ( ( ticks - spray_tick ) + 1 )  <= trees-per-row )  [
    set x-coordinate ( border-margin + wildberry-plant-width + wildberry-plant-margin +  ( ( ( ticks - spray_tick + 1 )  - 1 ) * ( tree-width + tree-margin-x ) ) )
    if ( tree-width > 1 ) [ set x-coordinate ( x-coordinate + ceiling ( tree-width / 2 ) ) ]
    
    ask trees with [xcor = x-coordinate] [
      set magic_substance true 
      set color blue 
      set magic_substance_tick ticks
    ]
  ]   
end



to magic_substance_fade_away
  ask trees with [ magic_substance = true and magic_substance_tick = ( ticks - (ms_potency_duration * ticks-per-day ) ) ] [ 
    set magic_substance false
    set color green
    set magic_substance_tick 0
  ] 
end

to cherries-attract-closest-flies
  
  if cherries-available [
    
    let female-flies-with-eggs flies with [ ready-to-lay-egg ]
    
    ask trees with [ grown-cherries > 0 ] [
     
      let flies-in-radius female-flies-with-eggs with [ target-tick < ticks or distance myself < target-distance ] in-radius visibility
      if count flies-in-radius > grown-cherries [
        set flies-in-radius min-n-of grown-cherries flies-in-radius [ distance myself ]
      ]
      
      if any? flies-in-radius [
      
        let target-x xcor
        let target-y ycor
        
        ask flies-in-radius [
          
          facexy target-x target-y
          set target-tick ticks
          set target-distance distance patch target-x target-y
          
        ]
        
      ]
      
    ]
    
  ]
  
end