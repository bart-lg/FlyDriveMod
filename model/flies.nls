breed [ flies fly ]

; properties of fly
flies-own [
  
  ; modes: stationary (yellow), adult (red)
  mode
  ; days since last mode change
  mode-duration
  
  ; immature-state after egg laying and after release: TRUE, FALSE
  ; immature-start: tick of immature start
  immature-state
  immature-start
  
  ; generation (1 (initial population), 2, 3, ...)
  generation
  
  ; sex: f,m
  sex
  
  ; partner-search: TRUE, FALSE (if false => color: blue)
  partner-search
  
  ; number of eggs in body
  eggs
  
  ; temporary variable for fly activities
  ready-to-lay-egg
  
  ; tick of last egg laying
  last-egg-tick
  
  ; own genotype: ++ | M+ | MM | R+ | RM | RR
  ; + => wild type
  ; M => modified type
  ; R => resistant type
  genotype
  
  ; fitness of fly
  fitness
  
  ; genotype of partner (important for determining genotype of next generation)
  genotype-of-partner
  
  fitness-of-partner
  combined-fitness
  
  ; following properties in ticks
  total-age
  fertilization-tick
  
  ; for performance reasons plants are looking for closest flies and set their direction
  ; if direction has been set in current tick, the following variable gets updated with the tick-number
  target-tick
  target-distance
  
]

to-report ticks-since-fertilization
  report ( ticks - fertilization-tick )
end


to set-mortality-rates
  
  ; first check if csv file exists
  let file-path (word path-csv-input "mortalityRates.csv")
  if file-exists? file-path [
    
    file-open file-path
    
    ; check the headers of the columns
    let headers csv:from-row file-read-line
    if item 0 headers = "temperature" and item 1 headers = "mortalityRate" [
    
      ; create arrays
      set mortality-temperatures     array:from-list []
      set stat-mortality-rates-temp  array:from-list []
      set adult-mortality-rates-temp array:from-list []
      
      ; read data
      while [ not file-at-end? ] [
        
        let row csv:from-row file-read-line
        
        ; set temperature steps
        set mortality-temperatures array:from-list lput item 0 row array:to-list mortality-temperatures
        
        ; set mortality-rates depending on temperature
        set stat-mortality-rates-temp  array:from-list lput item 1 row array:to-list stat-mortality-rates-temp
        set adult-mortality-rates-temp array:from-list lput item 1 row array:to-list adult-mortality-rates-temp
        
      ]
      
    ]
    
    file-close
    
  ]
  
end

to set-eggs-per-day-rates

  ; first check if csv file exists
  let file-path (word path-csv-input "eggsPerDay.csv")
  if file-exists? file-path [
  
    file-open file-path
    
    ; check the headers of the columns
    let headers csv:from-row file-read-line
    if item 0 headers = "temperature" and item 1 headers = "eggsPerDay" [
    
      ; create arrays
      set eggs-per-day-temperatures array:from-list []
      set eggs-per-day array:from-list []
      
      ; read data
      while [ not file-at-end? ] [
        
        let row csv:from-row file-read-line
        
        ; set temperature steps
        set eggs-per-day-temperatures array:from-list lput item 0 row array:to-list eggs-per-day-temperatures
        
        ; set eggs-per-day-rates depending on temperature
        set eggs-per-day array:from-list lput item 1 row array:to-list eggs-per-day
        
      ]
      
    ]
    
    file-close
    
  ]
  
end

to-report set-mode-durations
  
  let allFilesExist TRUE
  
  ; check if all csv files exist
  let file-path (word path-csv-input "femaleEggsToAdult.csv")
  if not file-exists? file-path [ 
    set allFilesExist FALSE 
    output-print "femaleEggsToAdult.csv missing!"
  ]
  
  set file-path (word path-csv-input "femaleAdultLongevity.csv")
  if not file-exists? file-path [ 
    set allFilesExist FALSE 
    output-print "femaleAdultLongevity.csv missing!"
  ]
  
  set file-path (word path-csv-input "maleEggsToAdult.csv")
  if not file-exists? file-path [ 
    set allFilesExist FALSE 
    output-print "maleEggsToAdult.csv missing!"
  ]
  
  set file-path (word path-csv-input "maleAdultLongevity.csv")
  if not file-exists? file-path [ 
    set allFilesExist FALSE 
    output-print "maleAdultLongevity.csv missing!"
  ]
  
  if not allFilesExist [
    output-print "PLEASE CHECK CSV FILES!!!"
    output-print "Setup aborted."
    report FALSE
  ]
  
  ; ### TEMPERATURES
  ; ### FEMALE EGGS TO ADULT
  
  set file-path (word path-csv-input "femaleEggsToAdult.csv")
  file-open file-path
  
  ; check the headers of the columns
  let headers csv:from-row file-read-line
  if item 0 headers = "temperature" and item 1 headers = "femaleEggsToAdult" [
  
    ; create arrays
    set mode-duration-temperatures array:from-list []
    set female-stat-durations      array:from-list []
    
    ; read data
    while [ not file-at-end? ] [
      
      let row csv:from-row file-read-line
      
      ; set temperature steps
      set mode-duration-temperatures array:from-list lput   item 0 row                   array:to-list mode-duration-temperatures
      
      ; set female-egg-to-pupa-durations depending on temperature
      set female-stat-durations      array:from-list lput ( item 1 row * ticks-per-day ) array:to-list female-stat-durations
      
    ]  
    
  ]
  
  file-close
  
  ; ### FEMALE ADULT LONGEVITY
  
  set file-path (word path-csv-input "femaleAdultLongevity.csv")
  file-open file-path
  
  ; check the headers of the columns
  set headers csv:from-row file-read-line
  if item 0 headers = "temperature" and item 1 headers = "femaleAdultLongevity" [
  
    ; create arrays
    set female-adult-longevities array:from-list []
    
    ; read data
    while [ not file-at-end? ] [
      
      let row csv:from-row file-read-line
      
      ; set female-egg-to-pupa-durations depending on temperature
      set female-adult-longevities array:from-list lput ( item 1 row * ticks-per-day ) array:to-list female-adult-longevities
      
    ]  
    
  ]  
  
  file-close  
  
  ; ### MALE EGGS TO ADULT
  
  set file-path (word path-csv-input "maleEggsToAdult.csv")
  file-open file-path
  
  ; check the headers of the columns
  set headers csv:from-row file-read-line
  if item 0 headers = "temperature" and item 1 headers = "maleEggsToAdult" [
  
    ; create arrays
    set male-stat-durations array:from-list []
    
    ; read data
    while [ not file-at-end? ] [
      
      let row csv:from-row file-read-line
      
      ; set female-egg-to-pupa-durations depending on temperature
      set male-stat-durations array:from-list lput ( item 1 row * ticks-per-day ) array:to-list male-stat-durations
      
    ]  
    
  ]
  
  file-close
  
  ; ### MALE ADULT LONGEVITY
  
  set file-path (word path-csv-input "maleAdultLongevity.csv")
  file-open file-path
  
  ; check the headers of the columns
  set headers csv:from-row file-read-line
  if item 0 headers = "temperature" and item 1 headers = "maleAdultLongevity" [
  
    ; create arrays
    set male-adult-longevities array:from-list []
    
    ; read data
    while [ not file-at-end? ] [
      
      let row csv:from-row file-read-line
      
      ; set female-egg-to-pupa-durations depending on temperature
      set male-adult-longevities array:from-list lput ( item 1 row * ticks-per-day ) array:to-list male-adult-longevities
      
    ]  
    
  ]  
  
  file-close  
  
  report TRUE
  
end

to get-current-mode-durations
  
  ; determine index for arrays
  let i 0
  let stop-flag FALSE
  while [ not stop-flag ] [
    ifelse ( array:item mode-duration-temperatures i ) >= rounded-mean-10d-temp [ 
      set stop-flag TRUE
    ] [
      ifelse i < ( array:length mode-duration-temperatures - 1 ) [
        set i ( i + 1 ) 
      ] [
        set stop-flag TRUE 
      ]
    ]
  ]
  
  set current-female-stat-duration   array:item female-stat-durations    i
  set current-female-adult-longevity array:item female-adult-longevities i
  set current-male-stat-duration     array:item male-stat-durations      i
  set current-male-adult-longevity   array:item male-adult-longevities   i
  
end

to calculate-current-eggs-per-tick-rate
  
  ; determine index for array
  let i 0
  let stop-flag FALSE
  while [ not stop-flag ] [
    ifelse ( array:item eggs-per-day-temperatures i ) >= rounded-mean-10d-temp [ 
      set stop-flag TRUE
    ] [
      ifelse i < ( array:length eggs-per-day-temperatures - 1 ) [
        set i ( i + 1 ) 
      ] [
        set stop-flag TRUE 
      ]
    ]
  ]  
  
  ; calculate current eggs-per-tick-rate
  set current-eggs-per-tick ( array:item eggs-per-day i ) / ticks-per-day
  
  ; log values
  array:set output-values 37 ( array:item eggs-per-day i )
  array:set output-values 38 current-eggs-per-tick
  
end

to fly-init-pop
  
  let temp-pop init-pop
  
  set-default-shape flies "dot"
  
  while [ temp-pop > 0 ] [
    let current-pop 0
    ifelse temp-pop > count patches [
      set current-pop ( count patches )
      set temp-pop ( temp-pop - count patches )
    ] [
      set current-pop temp-pop
      set temp-pop 0
    ]
    ask n-of current-pop patches [
      sprout-flies 1 [
        set mode "adult"
        set mode-duration 0
        set generation 1
        ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
        set partner-search TRUE
        set eggs 0
        set ready-to-lay-egg FALSE
        set genotype "++"
        set fitness fitness-PP
        set total-age 0
        set fertilization-tick 0
        set immature-state FALSE
        if sex = "f" [ set color magenta ]
        if sex = "m" [ set color blue    ]
      ] 
    ]
  ]

  ask n-of ( init-pop * resistant-ratio ) flies [
    set genotype "RR"
    set fitness fitness-RR
  ]
  
end

to kill-flies-off-season
  ask flies with [ mode = "stationary" ] [ die ]
  let surviving-flies count flies - ceiling ( count flies * mortality-off-season )
  ask n-of ( ceiling ( count flies with [ sex = "f" ] * mortality-off-season ) ) flies with [ sex = "f" ] [ die ]
  ask n-of ( count flies - surviving-flies ) flies with [ sex = "m" ] [ die ]
end

to kill-flies
  
  ; ### death due to life-expectancy ###

  let female-adult-flies count flies with [ sex = "f" and mode = "adult" ]
  let male-adult-flies   count flies with [ sex = "m" and mode = "adult" ]
  
  ask flies with [ sex = "f" and mode = "adult" and current-female-adult-longevity < mode-duration ] [ die ]
  ask flies with [ sex = "m" and mode = "adult" and current-male-adult-longevity   < mode-duration ] [ die ]

  ; log
  array:set output-values 47 ( female-adult-flies - ( count flies with [ sex = "f" and mode = "adult" ] ) )
  array:set output-values 48 ( male-adult-flies   - ( count flies with [ sex = "m" and mode = "adult" ] ) )
  
  ; ### death due to mortality rate ###
  
  ; determine index for arrays
  let i 0
  let stop-flag FALSE
  
  while [ not stop-flag ] [
    ifelse ( array:item mortality-temperatures i ) >= rounded-mean-10d-temp [ 
      set stop-flag TRUE
    ] [
      ifelse i < ( array:length mortality-temperatures - 1 ) [
        set i ( i + 1 ) 
      ] [
        set stop-flag TRUE 
      ]
    ]
  ]
  
  ; calculate mortality rates for current day
  ; endpop = startpop * exp^(k * t)
  ; t => 1 (one day)
  ; k = ln(1 - mortality-rate) / interval
  
  ; we need to "let" (define) a variable outside of if statement...
  let stat-mortality-rate 1
  if array:item stat-mortality-rates-temp i   < 1 [
    set stat-mortality-rate   1 - ( e ^ ( ln ( 1 - array:item stat-mortality-rates-temp i ) / mortality-interval ) )
  ]
  ; log
  array:set output-values 45 stat-mortality-rate
  
  let adult-mortality-rate 1
  if array:item adult-mortality-rates-temp i < 1 [
    set adult-mortality-rate 1 - ( e ^ ( ln ( 1 - array:item adult-mortality-rates-temp i ) / mortality-interval ) )
  ]
  ; log
  array:set output-values 46 adult-mortality-rate
  
  ; preparation for future versions: different mortality depending on genotype
  
  let PP-stat-flies  count flies with [ mode = "stationary" and genotype = "++" ]
  let PP-adult-flies count flies with [ mode = "adult"      and genotype = "++" ]
  
  let PR-stat-flies  count flies with [ mode = "stationary" and ( genotype = "R+" or genotype = "+R" ) ]
  let PR-adult-flies count flies with [ mode = "adult"      and ( genotype = "R+" or genotype = "+R" ) ]

  let RR-stat-flies  count flies with [ mode = "stationary" and genotype = "RR" ]
  let RR-adult-flies count flies with [ mode = "adult"      and genotype = "RR" ]

  let MM-stat-flies  count flies with [ mode = "stationary" and genotype = "MM" ]
  let MM-adult-flies count flies with [ mode = "adult"      and genotype = "MM" ]

  let MR-stat-flies  count flies with [ mode = "stationary" and ( genotype = "MR" or genotype = "RM" ) ]
  let MR-adult-flies count flies with [ mode = "adult"      and ( genotype = "MR" or genotype = "RM" ) ]

  let MP-stat-flies  count flies with [ mode = "stationary" and ( genotype = "M+" or genotype = "+M" ) ]
  let MP-adult-flies count flies with [ mode = "adult"      and ( genotype = "M+" or genotype = "+M" ) ]
  
  
  ; kill flies due to mortality rate
  
  let kill-num ( ceiling ( PP-stat-flies   * stat-mortality-rate ) )   
  ask n-of kill-num flies with [mode = "stationary"   and genotype = "++" ] [ die ]
  ; log
  array:set output-values 49 kill-num
  
  set kill-num ( ceiling ( PP-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and genotype = "++" ] [ die ]
  ; log
  array:set output-values 50 kill-num

  set kill-num ( ceiling ( PR-stat-flies   * stat-mortality-rate ) )
  ask n-of kill-num flies with [mode = "stationary"   and ( genotype = "R+" or genotype = "+R" ) ] [ die ]
  ; log
  array:set output-values 51 kill-num
  
  set kill-num ( ceiling ( PR-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and ( genotype = "R+" or genotype = "+R" ) ] [ die ]
  ; log
  array:set output-values 52 kill-num

  set kill-num ( ceiling ( RR-stat-flies   * stat-mortality-rate ) )
  ask n-of kill-num flies with [mode = "stationary"   and genotype = "RR" ] [ die ]
  ; log
  array:set output-values 53 kill-num
  
  set kill-num ( ceiling ( RR-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and genotype = "RR" ] [ die ]
  ; log
  array:set output-values 54 kill-num

  set kill-num ( ceiling ( MM-stat-flies   * stat-mortality-rate ) )
  ask n-of kill-num flies with [mode = "stationary"   and genotype = "MM" ] [ die ]
  ; log
  array:set output-values 55 kill-num
  
  set kill-num ( ceiling ( MM-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and genotype = "MM" ] [ die ]
  ; log
  array:set output-values 56 kill-num

  set kill-num ( ceiling ( MP-stat-flies   * stat-mortality-rate ) )
  ask n-of kill-num flies with [mode = "stationary"   and ( genotype = "M+" or genotype = "+M" ) ] [ die ]
  ; log
  array:set output-values 57 kill-num  
  
  set kill-num ( ceiling ( MP-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and ( genotype = "M+" or genotype = "+M" ) ] [ die ]  
  ; log
  array:set output-values 58 kill-num  

  set kill-num ( ceiling ( MR-stat-flies   * stat-mortality-rate ) )
  ask n-of kill-num flies with [mode = "stationary"   and ( genotype = "MR" or genotype = "RM" ) ] [ die ]
  ; log
  array:set output-values 59 kill-num
  
  set kill-num ( ceiling ( MR-adult-flies * adult-mortality-rate ) )
  ask n-of kill-num flies with [mode = "adult" and ( genotype = "MR" or genotype = "RM" ) ] [ die ]  
  ; log
  array:set output-values 60 kill-num  
  
end

to update-egg-laying-mode
  
  let inverse-current-eggs-per-tick 0
  
  if current-eggs-per-tick > 0 [
    set inverse-current-eggs-per-tick round ( 1 / current-eggs-per-tick )
  ]
 
  ask flies with [ sex = "f" and eggs > 0 ] [
    
    ifelse current-eggs-per-tick > 0 and ticks-since-fertilization > egg-dev-duration and ( ticks - last-egg-tick ) >= inverse-current-eggs-per-tick [
      set ready-to-lay-egg TRUE
    ] [
      set ready-to-lay-egg FALSE
    ]
    
  ]
  
end

to fly-activities

  ask flies [
    ; upgrade mode of fly
    upgrade-fly
    
    ; increase age and mode-duration
    set mode-duration ( mode-duration + 1 )
    set total-age ( total-age + 1 )    
  ]
  
  let male-adult-flies flies with [ sex = "m" and mode = "adult" ]
  let female-adult-flies flies with [ sex = "f" and mode = "adult" ]
  
  ; limit number of matings for male fly (current limit: 1 mating per tick)
  ask male-adult-flies with [ partner-search = FALSE and ticks-since-fertilization > 0 ] [ 
    set partner-search TRUE 
  ]
  
  let fertile-male-adult-flies male-adult-flies with [ partner-search = TRUE ]
  let fertile-female-adult-flies female-adult-flies with [ partner-search = TRUE ]

  ask fertile-female-adult-flies [

    let fertile-male-adult-flies-here flies-here with [ sex = "m" and mode = "adult" and partner-search = TRUE ]
    
    ; if female fly detects male fly on same patch => start fertilization
    if any? fertile-male-adult-flies-here [
      set partner-search FALSE
      set fertilization-tick ticks
      set eggs eggs-per-cycle
      let partner n-of 1 fertile-male-adult-flies-here 
      ; "[genotype] of partner" and "[fitness] of partner" return lists
      set genotype-of-partner first [genotype] of partner
      set fitness-of-partner first [fitness] of partner
      set combined-fitness ( fitness * fitness-of-partner )
      set color orange
      ask partner [
        set partner-search FALSE
        set fertilization-tick ticks 
      ]
    ]     
 
  ]
  
  ask female-adult-flies with [ ready-to-lay-egg = TRUE ] [  
    
    if ( cherries-available or wildberries-available ) [

      let cherries-here no-turtles
      if cherries-available [ set cherries-here ( trees-on patches in-radius tree-radius ) with [grown-cherries > 0] ]
      
      let wildberries-here no-turtles
      if wildberries-available [ set wildberries-here ( wildberry-plants-on patch-here ) with [grown-wildberries > 0] ]
      
      if any? cherries-here or any? wildberries-here [
        
        ; save generation number in separate variable to make it accessible in sprout statement
        let generation-temp generation
        
        let genotype-temp new-genotype genotype genotype-of-partner
        
        ; Notice: egg poisioning or the non-production of eggs due to fitness rate have impact on frequency of egg laying, 
        ; due to the updated variables eggs and last-egg-tick 
        
        ; FEMALE: M+ or MR => ++ or R+ DIE
        ; FEMALE: M+ or MR => RR DIE with certain prob. due to resistance
        let lay-egg TRUE
        if member? "M" genotype [
          if genotype-temp = "++" or genotype-temp = "R+" or genotype-temp = "+R" [ set lay-egg FALSE ]
          if genotype-temp = "RR" [
            if random-float 1 > resistance-rate [
              set lay-egg FALSE
            ]
          ] 
        ]
        
        ; fitness rate
        if random-float 1 > combined-fitness [ set lay-egg FALSE ]
        
        ifelse lay-egg [
          
          ask patch-here [
            sprout-flies 1 [
              set color yellow
              set mode "stationary"
              set mode-duration 0
              set generation generation-temp + 1
              ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
              set partner-search FALSE
              set eggs 0
              set ready-to-lay-egg FALSE
              set genotype genotype-temp
              set fitness ( get-fitness-for-genotype genotype-temp )
              set total-age 0
              set fertilization-tick 0
              set immature-state FALSE
            ]
          ]
          
          ifelse any? cherries-here [
            
            ask one-of cherries-here [
              set grown-cherries ( grown-cherries - 1 )
              set occupied-cherries ( occupied-cherries + 1 )
              update-tree-label
            ]
            
            if sum [ grown-cherries ] of trees = 0 [ set cherries-available FALSE ]
            
          ] [
            
            ifelse any? wildberries-here [
              
              ask one-of wildberries-here [
                set grown-wildberries ( grown-wildberries - 1 ) 
                set occupied-wildberries ( occupied-wildberries + 1 )
              ]
              
              if sum [ grown-wildberries ] of wildberry-plants = 0 [ set wildberries-available FALSE ]
              
            ] [
              print "Laid egg on patch with no cherries and no fruit (should not happen!)" 
            ]
            
          ]
          
          ; log
          array:set output-values 39 ( ( array:item output-values 39 ) + 1 )
          
        ] [
          ; log
          array:set output-values 40 ( ( array:item output-values 40 ) + 1 )
        ]
        
        set eggs ( eggs - 1 )
        set last-egg-tick ticks
        
        if eggs = 0 [
          ; set partner-search TRUE => controlled by start-immature-state and end-immature-state
          start-immature-state
          set color magenta
        ] 
        
      ]
        
    ]
    
  ]
  
  ask female-adult-flies [
    if not ( target-tick = ticks ) [ rt random 360 ]
    fd 1
  ]  
  
  ask male-adult-flies [
    if not ( target-tick = ticks ) [ rt random 360 ]
    fd 1
  ]  
  
end

; upgrade mode of fly if appropriate mode duration reached
to upgrade-fly
  
  if mode = "stationary" [
    
    if ( sex = "f" and mode = "stationary" and mode-duration >= current-female-stat-duration ) [
      set mode "adult"
      set mode-duration 0
      set partner-search TRUE
      set color magenta
    ]
    
    if ( sex = "m" and mode = "stationary" and mode-duration >= current-male-stat-duration ) [
      set mode "adult"
      set mode-duration 0
      set partner-search TRUE
      set color blue
    ]
    
    ; increase log-value
    if mode = "adult" [ array:set output-values 36 ( ( array:item output-values 36 ) + 1 ) ]
    
  ]

end

; calculates new genotype
; M+ => 50% prob. M; 50% prob. +
to-report new-genotype [genotype1 genotype2]
  
  let temp1 ""
  let temp2 ""
  
  if genotype1 = "++" [ set temp1 "+" ]
  if genotype1 = "MM" [ set temp1 "M" ]
  if genotype1 = "RR" [ set temp1 "R" ]
  
  if genotype1 = "M+" or genotype1 = "+M" [ ifelse random 2 = 1 [ set temp1 "M" ] [ set temp1 "+" ] ]
  if genotype1 = "R+" or genotype1 = "+R" [ ifelse random 2 = 1 [ set temp1 "R" ] [ set temp1 "+" ] ]
  if genotype1 = "MR" or genotype1 = "RM" [ ifelse random 2 = 1 [ set temp1 "M" ] [ set temp1 "R" ] ]
  
  if genotype2 = "++" [ set temp2 "+" ]
  if genotype2 = "MM" [ set temp2 "M" ]
  if genotype2 = "RR" [ set temp2 "R" ]
  
  if genotype2 = "M+" or genotype2 = "+M" [ ifelse random 2 = 1 [ set temp2 "M" ] [ set temp2 "+" ] ]
  if genotype2 = "R+" or genotype2 = "+R" [ ifelse random 2 = 1 [ set temp2 "R" ] [ set temp2 "+" ] ]
  if genotype2 = "MR" or genotype2 = "RM" [ ifelse random 2 = 1 [ set temp2 "M" ] [ set temp2 "R" ] ]
  
  report (word temp1 temp2)
  
end

to release-gene-drive
  
  ask patch ( max-pxcor / 2 ) ( max-pycor / 2 ) [
    sprout-flies release-amount [
      set mode "adult"
      set mode-duration 0
      set generation 1
      set sex "f" ; default, if gd-gender not set
      if gd-gender = "female" [
        set sex "f"  
      ]
      if gd-gender = "mixed" [
        ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
      ]
      if gd-gender = "male" [
        set sex "m"
      ]
      set ready-to-lay-egg FALSE
      ; set partner-search TRUE => controlled by start-immature-state and end-immature-state
      set eggs 0
      set genotype "MM"
      set fitness fitness-MM
      set total-age 0
      set fertilization-tick 0
      start-immature-state
      if sex = "f" [ set color magenta ]
      if sex = "m" [ set color blue    ]
    ] 
  ]  
  
end

to-report get-fitness-for-genotype [ temp-genotype ]
  
  if temp-genotype = "++" [ report fitness-PP ]
  if temp-genotype = "RR" [ report fitness-RR ]
  if temp-genotype = "MM" [ report fitness-MM ]

  if temp-genotype = "R+" or temp-genotype = "+R" [ report fitness-PR ]
  if temp-genotype = "MR" or temp-genotype = "RM" [ report fitness-MR ]
  if temp-genotype = "M+" or temp-genotype = "+M" [ report fitness-MP ]
  
end

to female-attract-male-flies
  
  let fertile-male-adult-flies flies with [ sex = "m" and mode = "adult" and partner-search = TRUE ]
  
  ask flies with [ mode = "adult" and sex = "f" and partner-search = TRUE ] [
    
    let target-fly min-one-of fertile-male-adult-flies with [ target-tick < ticks or distance myself < target-distance ] in-radius visibility [ distance myself ]

    if is-turtle? target-fly [
      let destination-x xcor
      let destination-y ycor
      
      ask target-fly [
        facexy destination-x destination-y
        set target-tick ticks
        set target-distance distance patch destination-x destination-y
      ]
    ]    
  ]
  
end  

to start-immature-state
  
  set immature-state TRUE
  set immature-start ticks
  set partner-search FALSE
  
end

to end-immature-state
  
  set immature-state FALSE
  set partner-search TRUE
  
end

to check-immature-state
  
  if ticks > ( immature-duration * ticks-per-day ) [
    ask flies with [ immature-state = TRUE and immature-start <= ( ticks - ( immature-duration * ticks-per-day ) ) ] [
      end-immature-state    
    ]
  ]
  
end

