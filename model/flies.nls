breed [ flies fly ]

; properties of fly
flies-own [
  
  ; modes: egg (yellow), larva (orange), pupa (pink), immature-adult (magenta), mature-adult (red)
  mode
  ; days since last mode change
  mode-duration
  
  ; generation (1 (initial population), 2, 3, ...)
  generation
  
  ; sex: f,m
  sex
  
  ; partner-search: TRUE, FALSE (if false => color: blue)
  partner-search
  
  ; number of eggs in body
  eggs
  
  ; tick of last egg laying
  last-egg-tick
  
  ; own genotype: ++ | M+ | MM | R+ | RM | RR
  ; + => wild type
  ; M => modified type
  ; R => resistant type
  genotype
  
  ; genotype of partner (important for determining genotype of next generation)
  genotype-of-partner
  
  ; following properties in ticks
  total-age
  ticks-since-fertilization
  
]

to set-mortality-rates
  
  ; first check if csv file exists
  let file-path (word path-csv-input "mortalityRates.csv")
  if file-exists? file-path [
  
    file-open file-path
    
    ; check the headers of the columns
    let headers csv:from-row file-read-line
    if item 0 headers = "temperature" and item 1 headers = "mortalityRate" [
    
      ; create arrays
      set mortality-temperatures              array:from-list []
      set egg-mortality-rates-temp            array:from-list []
      set larva-mortality-rates-temp          array:from-list []
      set pupa-mortality-rates-temp           array:from-list []
      set immature-adult-mortality-rates-temp array:from-list []
      set mature-adult-mortality-rates-temp   array:from-list []
      
      ; read data
      while [ not file-at-end? ] [
        
        let row csv:from-row file-read-line
        
        ; set temperature steps
        set mortality-temperatures array:from-list lput item 0 row array:to-list mortality-temperatures
        
        ; set mortality-rates depending on temperature
        set egg-mortality-rates-temp            array:from-list lput item 1 row array:to-list egg-mortality-rates-temp
        set larva-mortality-rates-temp          array:from-list lput item 1 row array:to-list larva-mortality-rates-temp
        set pupa-mortality-rates-temp           array:from-list lput item 1 row array:to-list pupa-mortality-rates-temp
        set immature-adult-mortality-rates-temp array:from-list lput item 1 row array:to-list immature-adult-mortality-rates-temp
        set mature-adult-mortality-rates-temp   array:from-list lput item 1 row array:to-list mature-adult-mortality-rates-temp
        
      ]
      
    ]
    
    file-close
    
  ]
  
end

to eggs-per-day-rates

  ; first check if csv file exists
  let file-path (word path-csv-input "eggsPerDay.csv")
  if file-exists? file-path [
  
    file-open file-path
    
    ; check the headers of the columns
    let headers csv:from-row file-read-line
    if item 0 headers = "temperature" and item 1 headers = "eggsPerDay" [
    
      ; create arrays
      set eggs-per-day-temperatures array:from-list []
      set eggs-per-day array:from-list []
      
      ; read data
      while [ not file-at-end? ] [
        
        let row csv:from-row file-read-line
        
        ; set temperature steps
        set eggs-per-day-temperatures array:from-list lput item 0 row array:to-list eggs-per-day-temperatures
        
        ; set eggs-per-day-rates depending on temperature
        set eggs-per-day array:from-list lput item 1 row array:to-list eggs-per-day
        
      ]
      
    ]
    
    file-close
    
  ]
  
end

to calculate-current-eggs-per-tick-rate
  
  ; determine index for array
  let i 0
  let stop-flag FALSE
  while [ not stop-flag ] [
    ifelse ( array:item eggs-per-day-temperatures i ) >= ( round mean-10d-temp ) [ 
      set stop-flag TRUE
    ] [
      ifelse i < ( array:length eggs-per-day-temperatures - 1 ) [
        set i ( i + 1 ) 
      ] [
        set stop-flag TRUE 
      ]
    ]
  ]  
  
  ; calculate current eggs-per-tick-rate
  set current-eggs-per-tick ( array:item eggs-per-day i ) / ticks-per-day
  
end

to fly-init-pop
  
  set-default-shape flies "dot"
  
  ask n-of init-pop patches [
    sprout-flies 1 [
      set color red
      set mode "mature-adult"
      set mode-duration 0
      set generation 1
      ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
      set partner-search TRUE
      set eggs 0
      set genotype "++"
      set total-age 0
      set life-expectancy ( random 20 ) + ( 70 * ticks-per-day )
      set ticks-since-fertilization 0
    ] 
  ]

  ask n-of ( init-pop * ( resistant-ratio / 100 ) ) flies [
    set genotype "RR"
  ]
  
end

to kill-flies-off-season
  ask n-of ( ceiling ( count flies * mortality-off-season ) ) flies [ die ]
end

to kill-flies
  
  ; ### death due to life-expectancy ###
  
  ask flies [
    if total-age > life-expectancy [ die ]
  ]
  
  ; ### death due to mortality rate ###
  
  ; determine index for arrays
  let i 0
  let stop-flag FALSE
  while [ not stop-flag ] [
    ifelse ( array:item mortality-temperatures i ) >= ( round mean-10d-temp ) [ 
      set stop-flag TRUE
    ] [
      ifelse i < ( array:length mortality-temperatures - 1 ) [
        set i ( i + 1 ) 
      ] [
        set stop-flag TRUE 
      ]
    ]
  ]
  
  ; calculate mortality rates for current day
  ; endpop = startpop * exp^(k * t)
  ; t => 1 (one day)
  ; k = ln(1 - mortality-rate) / interval
  
  ; we need to "let" a variable outside of if statement...
  let egg-mortality-rate 1
  if array:item egg-mortality-rates-temp i            < 1 [
    set egg-mortality-rate            1 - ( e ^ ( ln ( 1 - array:item egg-mortality-rates-temp i )            / mortality-interval ) )
  ]
  
  let larva-mortality-rate 1
  if array:item larva-mortality-rates-temp i          < 1 [
    set larva-mortality-rate          1 - ( e ^ ( ln ( 1 - array:item larva-mortality-rates-temp i )          / mortality-interval ) )
  ]
  
  let pupa-mortality-rate 1
  if array:item pupa-mortality-rates-temp i           < 1 [
    set pupa-mortality-rate           1 - ( e ^ ( ln ( 1 - array:item pupa-mortality-rates-temp i )           / mortality-interval ) )
  ]
  
  let immature-adult-mortality-rate 1
  if array:item immature-adult-mortality-rates-temp i < 1 [
    set immature-adult-mortality-rate 1 - ( e ^ ( ln ( 1 - array:item immature-adult-mortality-rates-temp i ) / mortality-interval ) )
  ]
  
  let mature-adult-mortality-rate 1
  if array:item mature-adult-mortality-rates-temp i   < 1 [
    set mature-adult-mortality-rate   1 - ( e ^ ( ln ( 1 - array:item mature-adult-mortality-rates-temp i )   / mortality-interval ) )
  ]
  
  ; kill flies due to mortality rate
  ask n-of ( ceiling ( count flies with [mode = "egg"]            * egg-mortality-rate ) )            flies with [mode = "egg"]            [ die ]
  ask n-of ( ceiling ( count flies with [mode = "larva"]          * larva-mortality-rate ) )          flies with [mode = "larva"]          [ die ]
  ask n-of ( ceiling ( count flies with [mode = "pupa"]           * pupa-mortality-rate ) )           flies with [mode = "pupa"]           [ die ]
  ask n-of ( ceiling ( count flies with [mode = "immature-adult"] * immature-adult-mortality-rate ) ) flies with [mode = "immature-adult"] [ die ]
  ask n-of ( ceiling ( count flies with [mode = "mature-adult"]   * mature-adult-mortality-rate ) )   flies with [mode = "mature-adult"]   [ die ]
  
end

to fly-activities
  ask flies [

    ; upgrade mode of fly
    upgrade-fly
    
    ; if female fly detects male fly on same patch => start fertilization
    if sex = "f" and mode = "mature-adult" and partner-search = TRUE and any? flies-here with [sex = "m"] [
      set partner-search FALSE
      set ticks-since-fertilization 0
      set eggs eggs-per-cycle
      set genotype-of-partner first [genotype] of n-of 1 flies-here with [sex = "m"] 
      set color blue
    ]
    
    ; lay egg
    if sex = "f" and eggs > 0 and ticks-since-fertilization > egg-development-duration [ 

      let cherries-here ( trees-on patches in-radius floor ( tree-width / 2 ) ) with [grown-cherries > 0]
      let fruits-here ( yummy-plants-on patch-here ) with [grown-fruits > 0]
      
      if any? cherries-here or any? fruits-here [
        
        ; check duration to last egg...
        if ( ticks - last-egg-tick ) >= round ( 1 / current-eggs-per-tick ) [
        
          ; save generation number in separate variable to make it accessible in sprout statement
          let generation-temp generation
          
          let genotype-temp new-genotype genotype genotype-of-partner
          
          ; FEMALE: M+ or MR => ++ or R+ DIE
          ; FEMALE: M+ or MR => RR DIE with certain prob. due to resistance
          let lay-egg TRUE
          if member? "M" genotype [
            if genotype-temp = "++" or genotype-temp = "R+" or genotype-temp = "+R" [ set lay-egg FALSE ]
            if genotype-temp = "RR" [
              if random-float 1 > resistance-rate [
                set lay-egg FALSE
              ]
            ] 
          ]
          
          if lay-egg [
            
            ask patch-here [
              sprout-flies 1 [
                set color yellow
                set mode "egg"
                set mode-duration 0
                set generation generation-temp + 1
                ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
                set partner-search FALSE
                set eggs 0
                set genotype genotype-temp
                set total-age 0
                ; ##TODO## get appropriate life-expectancy depending on month
                set life-expectancy ( random 20 ) + ( 70 * ticks-per-day )
                set ticks-since-fertilization 0
              ]
            ]
            
            ifelse any? cherries-here [
              
              ask one-of cherries-here [
                set grown-cherries ( grown-cherries - 1 )
                set occupied-cherries ( occupied-cherries + 1 )
                update-tree-label
              ]
              
            ] [
              
              ifelse any? fruits-here [
                
                ask one-of fruits-here [
                  set grown-fruits ( grown-fruits - 1 ) 
                  set occupied-fruits ( occupied-fruits + 1 )
                ]
                
              ] [
                user-message "Laid egg on patch with no cherries and no fruit (should not happen!)" 
              ]
              
            ]
            
          ]
          
          set eggs ( eggs - 1 )
          set last-egg-tick ticks
          
          if eggs = 0 [
            set partner-search TRUE
            set color red
          ] 
          
        ]
        
      ]
      
    ]
    
    ; in case of fertilization => increase ticks since fertilization
    if partner-search = FALSE and sex = "f" [ set ticks-since-fertilization ( ticks-since-fertilization + 1 ) ]

    ; increase age and mode-duration
    set mode-duration ( mode-duration + 1 )
    set total-age ( total-age + 1 )
    
    ; female flies with eggs can sens cherries and fruits in a distance of 15m
    ifelse sex = "f" and eggs > 0 and ticks-since-fertilization > egg-development-duration [
      
      let visible-cherries trees with [grown-cherries > 0] in-radius visibility
      let visible-fruits yummy-plants with [grown-fruits > 0] in-radius visibility
      
      ifelse any? visible-cherries [
        
        ; do not move if cherries an same patch
        if not any? trees-here with [grown-cherries > 0] [
          face min-one-of visible-cherries [ distance myself ]
          fd 1
        ]
        
      ] [
       
        ifelse any? visible-fruits [
          
          ; do not move if fruits on same patch
          if not any? yummy-plants-here with [grown-fruits > 0] [
            face min-one-of visible-fruits [ distance myself ]
            fd 1
          ]
          
        ] [
          
          ; move randomly if no fruits in visibility range
          rt random 360
          fd 1 
          
        ]
        
      ]
      
    ] [
      
      ; all other flies move randomly
      if mode = "immature-adult" or mode = "mature-adult" [
        rt random 360
        fd 1
      ]
      
    ]
    
  ]  
end

; upgrade mode of fly if appropriate mode duration reached
to upgrade-fly
  if ( mode = "immature-adult" and round (mode-duration / ticks-per-day) >= immature-adult-duration ) [
    set mode "mature-adult"
    set mode-duration 0
    set partner-search TRUE
    set color red
  ]
  if ( mode = "pupa" and round (mode-duration / ticks-per-day) >= pupa-duration ) [
    set mode "immature-adult"
    set mode-duration 0
    set color magenta
  ]
  if ( mode = "larva" and round (mode-duration / ticks-per-day) >= larva-duration ) [
    set mode "pupa"
    set mode-duration 0
    set color pink
  ]   
  if ( mode = "egg" and round (mode-duration / ticks-per-day) >= egg-duration ) [
    set mode "larva"
    set mode-duration 0
    set color orange
  ]   
end

; calculates new genotype
; M+ => 50% prob. M; 50% prob. +
to-report new-genotype [genotype1 genotype2]
  
  let temp1 ""
  let temp2 ""
  
  if genotype1 = "++" [ set temp1 "+" ]
  if genotype1 = "MM" [ set temp1 "M" ]
  if genotype1 = "RR" [ set temp1 "R" ]
  
  if genotype1 = "M+" or genotype1 = "+M" [ ifelse random 2 = 1 [ set temp1 "M" ] [ set temp1 "+" ] ]
  if genotype1 = "R+" or genotype1 = "+R" [ ifelse random 2 = 1 [ set temp1 "R" ] [ set temp1 "+" ] ]
  if genotype1 = "MR" or genotype1 = "RM" [ ifelse random 2 = 1 [ set temp1 "M" ] [ set temp1 "R" ] ]
  
  if genotype2 = "++" [ set temp2 "+" ]
  if genotype2 = "MM" [ set temp2 "M" ]
  if genotype2 = "RR" [ set temp2 "R" ]
  
  if genotype2 = "M+" or genotype2 = "+M" [ ifelse random 2 = 1 [ set temp2 "M" ] [ set temp2 "+" ] ]
  if genotype2 = "R+" or genotype2 = "+R" [ ifelse random 2 = 1 [ set temp2 "R" ] [ set temp2 "+" ] ]
  if genotype2 = "MR" or genotype2 = "RM" [ ifelse random 2 = 1 [ set temp2 "M" ] [ set temp2 "R" ] ]
  
  report (word temp1 temp2)
  
end

to release-gene-drive
  
  ask patch ( max-pxcor / 2 ) ( max-pycor / 2 ) [
    sprout-flies release-amount [
      set color red
      set mode "mature-adult"
      set mode-duration 0
      set generation 1
      ; ifelse ( random 2 ) = 1 [ set sex "f" ][ set sex "m" ]
      set sex "f"
      set partner-search TRUE
      set eggs 0
      set genotype "MM"
      set total-age 0
      set life-expectancy ( random 20 ) + ( 70 * ticks-per-day )
      set ticks-since-fertilization 0
    ] 
  ]  
  
end